RISCV sw_supervisor

{
  (* Set up the intial state of the page table
   * PA 0x1000 = L2 PTE, points to PA 0x2000
   * PA 0x2000 = L1 PTE, points to PA 0x3000
   * PA 0x3080 = L0 PTE, invalid, but via NAPOT region maps to 0x20000
   * PA 0x3088 = adjacent L0 PTE, NAPOT, points to 0x21000
   *   PPN is 0x10110, but the lower 4 bits change to 0x1000 to encode
   *   a NAPOT region of size 64KiB, so the actual encoded PPN becomes
   *   0x11000 == 24 *)

  uint64_t *0x3088=pte64(n=1,ppn=0x28,d=1,a=1,g=0,u=1,x=0,w=1,r=1,v=1);
  (* uint64_t *0x3080=pte64(n=0,ppn=0x20,d=1,a=1,g=0,u=1,x=0,w=1,r=1,v=1); *)
  uint64_t *0x2000=pte64(n=0,ppn=3, d=0,a=0,g=0,u=1,x=0,w=0,r=0,v=1);
  uint64_t *0x1000=pte64(n=0,ppn=2, d=0,a=0,g=0,u=1,x=0,w=0,r=0,v=1);
}

P0;
(* run with --satp=0x8000000000000001 to use the page table created above in
   user mode.  In supervisor mode, this code could be run instead: *)

(*
li a0, sv48(asid=0, ppn=1);
csrw satp, a0;
*)

(* Store 42 to the VA mapped by the PTEs above *)

li a1, 0x10000;
li a2, 42;
sw a2, 0(a1);

exists 0:sepc=0 /\ 0:scause=0 /\ *0x20000=42
